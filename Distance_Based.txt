// Program demonstrating how to control a powerSTEP01-based ST X-NUCLEO-IHM03A1 
// stepper motor driver shield on an Arduino Uno-compatible board

#include <Bridge.h>
#include <Console.h>

#include <Ponoor_PowerSTEP01Library.h>
#include <SPI.h>
#include <Encoder.h>
// Pin definitions for the X-NUCLEO-IHM03A1 connected to an Uno-compatible board
#define nCS_PIN 10
#define STCK_PIN 9
#define nSTBY_nRESET_PIN 8
#define nBUSY_PIN 4

// powerSTEP library instance, parameters are distance from the end of a daisy-chain
// of drivers, !CS pin, !STBY/!Reset pin

powerSTEP driver(0, nCS_PIN, nSTBY_nRESET_PIN);
powerSTEP driver2(1, nCS_PIN, nSTBY_nRESET_PIN);

Encoder en1(4,5);
Encoder en2(2,3);


long readEncoder2() {
  long position = en2.read();
  return abs(position);
}

long readEncoder1() {
  long position = en1.read();
  return abs(position);
}



void setup() 
{
  // Start Console
  Bridge.begin();
  Console.begin();
  Console.println("powerSTEP01 Arduino control initialising...");

  // Prepare pins
  pinMode(nSTBY_nRESET_PIN, OUTPUT);
  pinMode(nCS_PIN, OUTPUT);
  pinMode(MOSI, OUTPUT);
  pinMode(MISO, OUTPUT);
  pinMode(SCK, OUTPUT);

  // Reset powerSTEP and set CS
  digitalWrite(nSTBY_nRESET_PIN, HIGH);
  digitalWrite(nSTBY_nRESET_PIN, LOW);
  digitalWrite(nSTBY_nRESET_PIN, HIGH);
  digitalWrite(nCS_PIN, HIGH);

  // Start SPI
  SPI.begin();
  SPI.setDataMode(SPI_MODE3);

  // Configure powerSTEP
  driver.SPIPortConnect(&SPI); // give library the SPI port (only the one on an Uno)
  
  driver.configSyncPin(BUSY_PIN, 0); // use SYNC/nBUSY pin as nBUSY, 
                                     // thus syncSteps (2nd paramater) does nothing
                                     
  driver.configStepMode(STEP_FS_128);
  
   // 1/128 microstepping, full steps = STEP_FS,
                                // options: 1, 1/2, 1/4, 1/8, 1/16, 1/32, 1/64, 1/128
                                
  driver.setMaxSpeed(1000); // max speed in units of full steps/s 
  driver.setFullSpeed(2000); // full steps/s threshold for disabling microstepping
  driver.setAcc(1000); // full steps/s^2 acceleration
  driver.setDec(1000); // full steps/s^2 deceleration
  
  driver.setSlewRate(SR_520V_us); // faster may give more torque (but also EM noise),
                                  // options are: 114, 220, 400, 520, 790, 980(V/us)
                                  
  driver.setOCThreshold(8); // over-current threshold for the 2.8A NEMA23 motor
                            // used in testing. If your motor stops working for
                            // no apparent reason, it's probably this. Start low
                            // and increase until it doesn't trip, then maybe
                            // add one to avoid misfires. Can prevent catastrophic
                            // failures caused by shorts
  driver.setOCShutdown(OC_SD_ENABLE); // shutdown motor bridge on over-current event
                                      // to protect against permanant damage
  
  driver.setPWMFreq(PWM_DIV_1, PWM_MUL_0_75); // 16MHz*0.75/(512*1) = 23.4375kHz 
                            // power is supplied to stepper phases as a sin wave,  
                            // frequency is set by two PWM modulators,
                            // Fpwm = Fosc*m/(512*N), N and m are set by DIV and MUL,
                            // options: DIV: 1, 2, 3, 4, 5, 6, 7, 
                            // MUL: 0.625, 0.75, 0.875, 1, 1.25, 1.5, 1.75, 2
                            
  driver.setVoltageComp(VS_COMP_DISABLE); // no compensation for variation in Vs as
                                          // ADC voltage divider is not populated
                                          
  driver.setSwitchMode(SW_USER); // switch doesn't trigger stop, status can be read.
                                 // SW_HARD_STOP: TP1 causes hard stop on connection 
                                 // to GND, you get stuck on switch after homing
                                      
  driver.setOscMode(INT_16MHZ); // 16MHz internal oscillator as clock source

  // KVAL registers set the power to the motor by adjusting the PWM duty cycle,
  // use a value between 0-255 where 0 = no power, 255 = full power.
  // Start low and monitor the motor temperature until you find a safe balance
  // between power and temperature. Only use what you need
 

  driver.setParam(ALARM_EN, 0x8F); // disable ADC UVLO (divider not populated),
                                   // disable stall detection (not configured),
                                   // disable switch (not using as hard stop)

  driver.getStatus(); // clears error flags

  Console.println(F("Initialisation complete"));

  // Configure powerSTEP
  driver2.SPIPortConnect(&SPI); // give library the SPI port (only the one on an Uno)
  
  driver2.configSyncPin(BUSY_PIN, 0); // use SYNC/nBUSY pin as nBUSY, 
                                     // thus syncSteps (2nd paramater) does nothing
                                     
  driver2.configStepMode(STEP_FS_128); 
                               
                                
  driver2.setMaxSpeed(1000); 
  driver2.setFullSpeed(2000);
  driver2.setAcc(1000); 
  driver2.setDec(1000); 
  
  driver2.setSlewRate(SR_520V_us); 
                                 
                                  
  driver2.setOCThreshold(8); 
                          
                            // failures caused by shorts
  driver2.setOCShutdown(OC_SD_ENABLE); // shutdown motor bridge on over-current event
                                      // to protect against permanant damage
  
  driver2.setPWMFreq(PWM_DIV_1, PWM_MUL_0_625); 
                          
                            
  driver2.setVoltageComp(VS_COMP_DISABLE); 
                                         
                                          
  driver2.setSwitchMode(SW_USER); 
                                      
  driver2.setOscMode(INT_16MHZ); 

  driver.setRunKVAL(40);
  driver.setAccKVAL(40);
  driver.setDecKVAL(40);
  driver.setHoldKVAL(8);
  driver2.setRunKVAL(40);
  driver2.setAccKVAL(40);
  driver2.setDecKVAL(40);
  driver2.setHoldKVAL(8);

//   driver.setRunTVAL(70);
//   driver.setAccTVAL(70);
//   driver.setDecTVAL(70);
//   driver.setHoldTVAL(8);
//   driver2.setRunTVAL(70);
//   driver2.setAccTVAL(70);
//   driver2.setDecTVAL(70);
//   driver2.setHoldTVAL(8);
  Console.println(driver2.getAccTVAL());
   Console.println(driver2.getRunTVAL());
    Console.println(driver2.getDecTVAL());
  //    Console.println(driver2.getHoldTVAL());
//   driver2.setCurrentMode();
//  driver.setCurrentMode();

  driver2.setParam(ALARM_EN, 0x8F); // disable ADC UVLO (divider not populated),
                                   // disable stall detection (not configured),
                                   // disable switch (not using as hard stop)

  driver2.getStatus(); // clears error flags
}

int calculateVelocity(float x, int distance) {
  int max_speed = 450;
  float smoothing_factor = 0.11;
  int c1 = 40;
  int c2 = distance - 40;
  float y1 = max_speed / (1 + exp(smoothing_factor * (-x + c1)));
  float y2 = max_speed / (1 + exp(smoothing_factor * (x - c2)));
  int y = 5;
  float m = (max_speed / 2)/c1;
  if (x >=0 && x <= distance / 2 && x<=c1) y = m * x;
  if (x>c1 && x<=(distance/2)) y = y1;
  if (x>=(distance/2) && x<=c2) y = y2;
  if (x>c2 && x<=distance && x>(distance/2)) y = -((m*x)-(m*distance));
  
  y = y < 25 ? 25 : y;
  //Console.print("Dist: ");
  //Console.print(x);
  //Console.print(" Speed: ");
  Console.println(y);
  return y;
}

float pulseToMm(float pulse) {
  const double pi = 3.14159265358979323846;

  float mmPerRotation = pi * 69.4;
  float pulsePerRotation = 4000;
  float mmPerPulse = mmPerRotation / pulsePerRotation;
  float converted = pulse * mmPerPulse;
  return converted;
}

float getPulses(int distance) {
   const double pi = 3.14159265358979323846;

   float diameter = 69.4;
   int pulsePerRotation = 4000;
   
   float distancePerRotation = pi * diameter;
   float pulsePerMm = 4000 / distancePerRotation;
   float pulses = distance * pulsePerMm;
   Console.println(pulses);
   Console.println(distance);
   Console.println(pulsePerMm);
   return pulses;
}

void loop() 
{ 

  // static boolean runMotor = false;
  // Console.println(readEncoder2());
  // driver2.run(FWD, 50);

  

   if (Console.available() > 0) {
    String entry = Console.readStringUntil('\n');
    char command = entry[0];
    int dist = entry.substring(1).toInt();
    Console.println(dist);
    Console.println(command);
    if (command == 'r') {
        en2.readAndReset();
        unsigned long startReading = readEncoder2();
        
        int distance = dist;
        float pulses = getPulses(distance);
        
        while (readEncoder2() - startReading <= pulses){
        long diff = readEncoder2() - startReading;
        // Console.println(diff);
        float x = pulseToMm(diff);
        // Console.println(x);
        int y = calculateVelocity(x, distance);
        // Console.println(y);
        // if (y >= 100) {
        //   driver.setCurrentMode();
        //   driver2.setCurrentMode();
        // }
        int steps = constrain(y, 0, 450); 
        
        driver.run(FWD, steps);
        driver2.run(FWD, steps);
        
        }
        en2.readAndReset();
        Console.println("Forward Complete");
        driver.run(FWD, 0);
        driver2.run(FWD, 0);
    }

    if (command == 'f') {
       int distance = dist;
       en2.readAndReset();
       float pulses = getPulses(distance);
       unsigned long startReading = readEncoder2();
        while (readEncoder2() - startReading <= pulses){
        long diff = readEncoder2() - startReading;
        float x = pulseToMm(diff);
        // Console.println(x);
        int y = calculateVelocity(x, distance);
        // Console.println(y);
        int steps = constrain(y, 0, 450); 
       
        driver.run(REV, steps);
        driver2.run(FWD, steps);
       
    }
        en2.readAndReset();
        Console.println("Left Complete");
        driver.run(FWD, 0);
        driver2.run(FWD, 0);
    }

    if (command == 'b') {
       int distance = dist;
       en2.readAndReset();
       float pulses = getPulses(distance);
       unsigned long startReading = readEncoder2();
        while (readEncoder2() - startReading <= pulses){
        long diff = readEncoder2() - startReading;
        float x = pulseToMm(diff);
        // Console.println(x);
        int y = calculateVelocity(x, distance);
        // Console.println(y);
        int steps = constrain(y, 0, 450); 
        
       
        driver.run(FWD, steps);
        driver2.run(REV, steps);
       
    }
        en2.readAndReset();
        Console.println("Right Complete");
        driver.run(FWD, 0);
        driver2.run(FWD, 0);
    }

    if (command == 'l') {
       int distance = dist;
       en2.readAndReset();
       float pulses = getPulses(distance);
       unsigned long startReading = readEncoder2();
        while (readEncoder2() - startReading <= pulses){
        long diff = readEncoder2() - startReading;
        float x = pulseToMm(diff);
        // Console.println(x);
        int y = calculateVelocity(x, distance);
        // Console.println(y);
        int steps = constrain(y, 0, 450); 
       
        driver.run(REV, steps);
        driver2.run(REV, steps);
       
    }
     en2.readAndReset();
        Console.println("Backward Complete");
        driver.run(FWD, 0);
        driver2.run(FWD, 0);
    }
  }



}